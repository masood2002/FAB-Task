import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";
export type ListCarrierParcelTemplatesGlobals = {
    /**
     * String used to pick a non-default API version to use
     */
    shippoApiVersion?: string | undefined;
};
/**
 * filter by user or enabled
 */
export declare const Include: {
    readonly All: "all";
    readonly User: "user";
    readonly Enabled: "enabled";
};
/**
 * filter by user or enabled
 */
export type Include = ClosedEnum<typeof Include>;
export type ListCarrierParcelTemplatesRequest = {
    /**
     * filter by user or enabled
     */
    include?: Include | undefined;
    /**
     * filter by specific carrier
     */
    carrier?: string | undefined;
};
/** @internal */
export declare namespace ListCarrierParcelTemplatesGlobals$ {
    const inboundSchema: z.ZodType<ListCarrierParcelTemplatesGlobals, z.ZodTypeDef, unknown>;
    type Outbound = {
        "SHIPPO-API-VERSION"?: string | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListCarrierParcelTemplatesGlobals>;
}
/** @internal */
export declare namespace Include$ {
    const inboundSchema: z.ZodNativeEnum<typeof Include>;
    const outboundSchema: z.ZodNativeEnum<typeof Include>;
}
/** @internal */
export declare namespace ListCarrierParcelTemplatesRequest$ {
    const inboundSchema: z.ZodType<ListCarrierParcelTemplatesRequest, z.ZodTypeDef, unknown>;
    type Outbound = {
        include?: string | undefined;
        carrier?: string | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListCarrierParcelTemplatesRequest>;
}
//# sourceMappingURL=listcarrierparceltemplates.d.ts.map