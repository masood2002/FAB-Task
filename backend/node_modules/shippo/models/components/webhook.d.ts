import * as z from "zod";
export type Webhook = {
    /**
     * Type of event that triggers the webhook.
     */
    event: string;
    /**
     * URL webhook events are sent to.
     */
    url: string;
    /**
     * Determines whether the webhook is active or not.
     */
    active?: boolean | undefined;
    /**
     * Determines whether the webhook is a test webhook or not.
     */
    isTest?: boolean | undefined;
    /**
     * Timestamp of the creation of the webhook.
     */
    objectCreated?: Date | undefined;
    /**
     * Unique identifier of the webhook. This can be used to retrieve or delete the webhook.
     */
    objectId?: string | undefined;
    /**
     * Timestamp of the last update of the webhook.
     */
    objectUpdated?: Date | undefined;
    /**
     * Username of the user who created the webhook.
     */
    objectOwner?: string | undefined;
};
/** @internal */
export declare namespace Webhook$ {
    const inboundSchema: z.ZodType<Webhook, z.ZodTypeDef, unknown>;
    type Outbound = {
        event: string;
        url: string;
        active?: boolean | undefined;
        is_test?: boolean | undefined;
        object_created?: string | undefined;
        object_id?: string | undefined;
        object_updated?: string | undefined;
        object_owner?: string | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Webhook>;
}
//# sourceMappingURL=webhook.d.ts.map