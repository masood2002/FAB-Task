"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Address$ = exports.Longitude$ = exports.Latitude$ = void 0;
const primitives_js_1 = require("../../lib/primitives.js");
const addressvalidationresults_js_1 = require("./addressvalidationresults.js");
const z = __importStar(require("zod"));
/** @internal */
var Latitude$;
(function (Latitude$) {
    Latitude$.inboundSchema = z.union([
        z.number(),
        z.string(),
    ]);
    Latitude$.outboundSchema = z.union([
        z.number(),
        z.string(),
    ]);
})(Latitude$ || (exports.Latitude$ = Latitude$ = {}));
/** @internal */
var Longitude$;
(function (Longitude$) {
    Longitude$.inboundSchema = z.union([
        z.number(),
        z.string(),
    ]);
    Longitude$.outboundSchema = z.union([
        z.number(),
        z.string(),
    ]);
})(Longitude$ || (exports.Longitude$ = Longitude$ = {}));
/** @internal */
var Address$;
(function (Address$) {
    Address$.inboundSchema = z
        .object({
        name: z.string().optional(),
        company: z.string().optional(),
        street1: z.string().optional(),
        street2: z.string().optional(),
        street3: z.string().optional(),
        street_no: z.string().optional(),
        city: z.string().optional(),
        state: z.string().optional(),
        zip: z.string().optional(),
        country: z.string(),
        phone: z.string().optional(),
        email: z.string().optional(),
        is_residential: z.boolean().optional(),
        metadata: z.string().optional(),
        is_complete: z.boolean().optional(),
        latitude: z.union([z.number(), z.string()]).optional(),
        longitude: z.union([z.number(), z.string()]).optional(),
        object_created: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        object_id: z.string().optional(),
        object_owner: z.string().optional(),
        object_updated: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        validation_results: addressvalidationresults_js_1.AddressValidationResults$.inboundSchema.optional(),
        test: z.boolean().optional(),
    })
        .transform((v) => {
        return (0, primitives_js_1.remap)(v, {
            street_no: "streetNo",
            is_residential: "isResidential",
            is_complete: "isComplete",
            object_created: "objectCreated",
            object_id: "objectId",
            object_owner: "objectOwner",
            object_updated: "objectUpdated",
            validation_results: "validationResults",
        });
    });
    Address$.outboundSchema = z
        .object({
        name: z.string().optional(),
        company: z.string().optional(),
        street1: z.string().optional(),
        street2: z.string().optional(),
        street3: z.string().optional(),
        streetNo: z.string().optional(),
        city: z.string().optional(),
        state: z.string().optional(),
        zip: z.string().optional(),
        country: z.string(),
        phone: z.string().optional(),
        email: z.string().optional(),
        isResidential: z.boolean().optional(),
        metadata: z.string().optional(),
        isComplete: z.boolean().optional(),
        latitude: z.union([z.number(), z.string()]).optional(),
        longitude: z.union([z.number(), z.string()]).optional(),
        objectCreated: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        objectId: z.string().optional(),
        objectOwner: z.string().optional(),
        objectUpdated: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        validationResults: addressvalidationresults_js_1.AddressValidationResults$.outboundSchema.optional(),
        test: z.boolean().optional(),
    })
        .transform((v) => {
        return (0, primitives_js_1.remap)(v, {
            streetNo: "street_no",
            isResidential: "is_residential",
            isComplete: "is_complete",
            objectCreated: "object_created",
            objectId: "object_id",
            objectOwner: "object_owner",
            objectUpdated: "object_updated",
            validationResults: "validation_results",
        });
    });
})(Address$ || (exports.Address$ = Address$ = {}));
//# sourceMappingURL=address.js.map