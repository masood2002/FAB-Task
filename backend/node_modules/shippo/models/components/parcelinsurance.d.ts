import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";
/**
 * To have insurance cover provided by a carrier directly instead of Shippo's provider (XCover), set provider to `FEDEX`, `UPS`, or `ONTRAC`.
 */
export declare const ParcelInsuranceProvider: {
    readonly Fedex: "FEDEX";
    readonly Ups: "UPS";
    readonly Ontrac: "ONTRAC";
};
/**
 * To have insurance cover provided by a carrier directly instead of Shippo's provider (XCover), set provider to `FEDEX`, `UPS`, or `ONTRAC`.
 */
export type ParcelInsuranceProvider = ClosedEnum<typeof ParcelInsuranceProvider>;
/**
 * To add insurace to your parcel, specify `amount`, `content` and `currency`. <br><br>If you do not want to add insurance to you parcel, do not set these parameters.
 */
export type ParcelInsurance = {
    /**
     * Declared value of the goods you want to insure.
     */
    amount?: string | undefined;
    /**
     * Description of parcel content.
     */
    content?: string | undefined;
    /**
     * Currency for the amount value. Currently only USD is supported for FedEx and UPS.
     */
    currency?: string | undefined;
    /**
     * To have insurance cover provided by a carrier directly instead of Shippo's provider (XCover), set provider to `FEDEX`, `UPS`, or `ONTRAC`.
     */
    provider?: ParcelInsuranceProvider | undefined;
};
/** @internal */
export declare namespace ParcelInsuranceProvider$ {
    const inboundSchema: z.ZodNativeEnum<typeof ParcelInsuranceProvider>;
    const outboundSchema: z.ZodNativeEnum<typeof ParcelInsuranceProvider>;
}
/** @internal */
export declare namespace ParcelInsurance$ {
    const inboundSchema: z.ZodType<ParcelInsurance, z.ZodTypeDef, unknown>;
    type Outbound = {
        amount?: string | undefined;
        content?: string | undefined;
        currency?: string | undefined;
        provider?: string | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ParcelInsurance>;
}
//# sourceMappingURL=parcelinsurance.d.ts.map