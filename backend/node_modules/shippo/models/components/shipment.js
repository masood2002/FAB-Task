"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Shipment$ = exports.ShipmentStatus$ = exports.ShipmentStatus = void 0;
const primitives_js_1 = require("../../lib/primitives.js");
const address_js_1 = require("./address.js");
const customsdeclaration_js_1 = require("./customsdeclaration.js");
const parcel_js_1 = require("./parcel.js");
const rate_js_1 = require("./rate.js");
const responsemessage_js_1 = require("./responsemessage.js");
const shipmentextra_js_1 = require("./shipmentextra.js");
const z = __importStar(require("zod"));
/**
 * `Waiting` shipments have been successfully submitted but not yet been processed.
 *
 * @remarks
 * `Queued` shipments are currently being processed.
 * `Success` shipments have been processed successfully, meaning that rate generation has concluded.
 * `Error` does not occur currently and is reserved for future use.
 */
exports.ShipmentStatus = {
    Error: "ERROR",
    Queued: "QUEUED",
    Success: "SUCCESS",
    Waiting: "WAITING",
};
/** @internal */
var ShipmentStatus$;
(function (ShipmentStatus$) {
    ShipmentStatus$.inboundSchema = z.nativeEnum(exports.ShipmentStatus);
    ShipmentStatus$.outboundSchema = ShipmentStatus$.inboundSchema;
})(ShipmentStatus$ || (exports.ShipmentStatus$ = ShipmentStatus$ = {}));
/** @internal */
var Shipment$;
(function (Shipment$) {
    Shipment$.inboundSchema = z
        .object({
        extra: shipmentextra_js_1.ShipmentExtra$.inboundSchema.optional(),
        metadata: z.string(),
        shipment_date: z.string().optional(),
        address_from: address_js_1.Address$.inboundSchema,
        address_return: address_js_1.Address$.inboundSchema.optional(),
        address_to: address_js_1.Address$.inboundSchema,
        carrier_accounts: z.array(z.string()),
        customs_declaration: customsdeclaration_js_1.CustomsDeclaration$.inboundSchema.optional(),
        messages: z.array(responsemessage_js_1.ResponseMessage$.inboundSchema),
        object_created: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        object_id: z.string(),
        object_owner: z.string(),
        object_updated: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        parcels: z.array(parcel_js_1.Parcel$.inboundSchema),
        rates: z.array(rate_js_1.Rate$.inboundSchema),
        status: ShipmentStatus$.inboundSchema,
        test: z.boolean().optional(),
    })
        .transform((v) => {
        return (0, primitives_js_1.remap)(v, {
            shipment_date: "shipmentDate",
            address_from: "addressFrom",
            address_return: "addressReturn",
            address_to: "addressTo",
            carrier_accounts: "carrierAccounts",
            customs_declaration: "customsDeclaration",
            object_created: "objectCreated",
            object_id: "objectId",
            object_owner: "objectOwner",
            object_updated: "objectUpdated",
        });
    });
    Shipment$.outboundSchema = z
        .object({
        extra: shipmentextra_js_1.ShipmentExtra$.outboundSchema.optional(),
        metadata: z.string(),
        shipmentDate: z.string().optional(),
        addressFrom: address_js_1.Address$.outboundSchema,
        addressReturn: address_js_1.Address$.outboundSchema.optional(),
        addressTo: address_js_1.Address$.outboundSchema,
        carrierAccounts: z.array(z.string()),
        customsDeclaration: customsdeclaration_js_1.CustomsDeclaration$.outboundSchema.optional(),
        messages: z.array(responsemessage_js_1.ResponseMessage$.outboundSchema),
        objectCreated: z.date().transform((v) => v.toISOString()),
        objectId: z.string(),
        objectOwner: z.string(),
        objectUpdated: z.date().transform((v) => v.toISOString()),
        parcels: z.array(parcel_js_1.Parcel$.outboundSchema),
        rates: z.array(rate_js_1.Rate$.outboundSchema),
        status: ShipmentStatus$.outboundSchema,
        test: z.boolean().optional(),
    })
        .transform((v) => {
        return (0, primitives_js_1.remap)(v, {
            shipmentDate: "shipment_date",
            addressFrom: "address_from",
            addressReturn: "address_return",
            addressTo: "address_to",
            carrierAccounts: "carrier_accounts",
            customsDeclaration: "customs_declaration",
            objectCreated: "object_created",
            objectId: "object_id",
            objectOwner: "object_owner",
            objectUpdated: "object_updated",
        });
    });
})(Shipment$ || (exports.Shipment$ = Shipment$ = {}));
//# sourceMappingURL=shipment.js.map