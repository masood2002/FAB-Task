"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Refund$ = exports.RefundStatus$ = exports.RefundStatus = void 0;
const primitives_js_1 = require("../../lib/primitives.js");
const z = __importStar(require("zod"));
/**
 * Indicates the status of the Refund.
 */
exports.RefundStatus = {
    Queued: "QUEUED",
    Pending: "PENDING",
    Success: "SUCCESS",
    Error: "ERROR",
};
/** @internal */
var RefundStatus$;
(function (RefundStatus$) {
    RefundStatus$.inboundSchema = z.nativeEnum(exports.RefundStatus);
    RefundStatus$.outboundSchema = RefundStatus$.inboundSchema;
})(RefundStatus$ || (exports.RefundStatus$ = RefundStatus$ = {}));
/** @internal */
var Refund$;
(function (Refund$) {
    Refund$.inboundSchema = z
        .object({
        object_created: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        object_id: z.string().optional(),
        object_owner: z.string().optional(),
        object_updated: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        status: RefundStatus$.inboundSchema.optional(),
        test: z.boolean().optional(),
        transaction: z.string().optional(),
    })
        .transform((v) => {
        return (0, primitives_js_1.remap)(v, {
            object_created: "objectCreated",
            object_id: "objectId",
            object_owner: "objectOwner",
            object_updated: "objectUpdated",
        });
    });
    Refund$.outboundSchema = z
        .object({
        objectCreated: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        objectId: z.string().optional(),
        objectOwner: z.string().optional(),
        objectUpdated: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        status: RefundStatus$.outboundSchema.optional(),
        test: z.boolean().optional(),
        transaction: z.string().optional(),
    })
        .transform((v) => {
        return (0, primitives_js_1.remap)(v, {
            objectCreated: "object_created",
            objectId: "object_id",
            objectOwner: "object_owner",
            objectUpdated: "object_updated",
        });
    });
})(Refund$ || (exports.Refund$ = Refund$ = {}));
//# sourceMappingURL=refund.js.map