"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CarrierAccountWithExtraInfo$ = exports.ObjectInfo$ = exports.Authentication$ = exports.CarrierAccountWithExtraInfoStatus$ = exports.CarrierAccountWithExtraInfoType$ = exports.ParametersT$ = exports.CarrierAccountWithExtraInfoStatus = exports.CarrierAccountWithExtraInfoType = void 0;
const primitives_js_1 = require("../../lib/primitives.js");
const carrieraccountservicelevel_js_1 = require("./carrieraccountservicelevel.js");
const fedexconnectexistingownaccountparameters_js_1 = require("./fedexconnectexistingownaccountparameters.js");
const upsconnectexistingownaccountparameters_js_1 = require("./upsconnectexistingownaccountparameters.js");
const z = __importStar(require("zod"));
/**
 * Authentication method used by this account.
 */
exports.CarrierAccountWithExtraInfoType = {
    Default: "default",
    Oauth: "oauth",
};
/**
 * Current authentication status. Possible values: 'disconnected' (authorization lost, reconnect needed), 'connected' (authorized and active), 'authorization_pending' (awaiting initial authorization flow).
 */
exports.CarrierAccountWithExtraInfoStatus = {
    Disconnected: "disconnected",
    Connected: "connected",
    AuthorizationPending: "authorization_pending",
};
/** @internal */
var ParametersT$;
(function (ParametersT$) {
    ParametersT$.inboundSchema = z.union([
        fedexconnectexistingownaccountparameters_js_1.FedExConnectExistingOwnAccountParameters$.inboundSchema,
        upsconnectexistingownaccountparameters_js_1.UPSConnectExistingOwnAccountParameters$.inboundSchema,
        z.record(z.any()),
    ]);
    ParametersT$.outboundSchema = z.union([
        fedexconnectexistingownaccountparameters_js_1.FedExConnectExistingOwnAccountParameters$.outboundSchema,
        upsconnectexistingownaccountparameters_js_1.UPSConnectExistingOwnAccountParameters$.outboundSchema,
        z.record(z.any()),
    ]);
})(ParametersT$ || (exports.ParametersT$ = ParametersT$ = {}));
/** @internal */
var CarrierAccountWithExtraInfoType$;
(function (CarrierAccountWithExtraInfoType$) {
    CarrierAccountWithExtraInfoType$.inboundSchema = z.nativeEnum(exports.CarrierAccountWithExtraInfoType);
    CarrierAccountWithExtraInfoType$.outboundSchema = CarrierAccountWithExtraInfoType$.inboundSchema;
})(CarrierAccountWithExtraInfoType$ || (exports.CarrierAccountWithExtraInfoType$ = CarrierAccountWithExtraInfoType$ = {}));
/** @internal */
var CarrierAccountWithExtraInfoStatus$;
(function (CarrierAccountWithExtraInfoStatus$) {
    CarrierAccountWithExtraInfoStatus$.inboundSchema = z.nativeEnum(exports.CarrierAccountWithExtraInfoStatus);
    CarrierAccountWithExtraInfoStatus$.outboundSchema = CarrierAccountWithExtraInfoStatus$.inboundSchema;
})(CarrierAccountWithExtraInfoStatus$ || (exports.CarrierAccountWithExtraInfoStatus$ = CarrierAccountWithExtraInfoStatus$ = {}));
/** @internal */
var Authentication$;
(function (Authentication$) {
    Authentication$.inboundSchema = z.object({
        type: CarrierAccountWithExtraInfoType$.inboundSchema.optional(),
        status: CarrierAccountWithExtraInfoStatus$.inboundSchema.optional(),
    });
    Authentication$.outboundSchema = z.object({
        type: CarrierAccountWithExtraInfoType$.outboundSchema.optional(),
        status: CarrierAccountWithExtraInfoStatus$.outboundSchema.optional(),
    });
})(Authentication$ || (exports.Authentication$ = Authentication$ = {}));
/** @internal */
var ObjectInfo$;
(function (ObjectInfo$) {
    ObjectInfo$.inboundSchema = z.object({
        authentication: z.lazy(() => Authentication$.inboundSchema).optional(),
    });
    ObjectInfo$.outboundSchema = z.object({
        authentication: z.lazy(() => Authentication$.outboundSchema).optional(),
    });
})(ObjectInfo$ || (exports.ObjectInfo$ = ObjectInfo$ = {}));
/** @internal */
var CarrierAccountWithExtraInfo$;
(function (CarrierAccountWithExtraInfo$) {
    CarrierAccountWithExtraInfo$.inboundSchema = z
        .object({
        account_id: z.string(),
        active: z.boolean().optional(),
        carrier: z.string(),
        parameters: z
            .union([
            fedexconnectexistingownaccountparameters_js_1.FedExConnectExistingOwnAccountParameters$.inboundSchema,
            upsconnectexistingownaccountparameters_js_1.UPSConnectExistingOwnAccountParameters$.inboundSchema,
            z.record(z.any()),
        ])
            .optional(),
        carrier_name: z.any().optional(),
        is_shippo_account: z.boolean().optional(),
        metadata: z.string().optional(),
        object_id: z.string().optional(),
        object_owner: z.string().optional(),
        service_levels: z.array(carrieraccountservicelevel_js_1.CarrierAccountServiceLevel$.inboundSchema).optional(),
        test: z.boolean().optional(),
        object_info: z.lazy(() => ObjectInfo$.inboundSchema).optional(),
    })
        .transform((v) => {
        return (0, primitives_js_1.remap)(v, {
            account_id: "accountId",
            carrier_name: "carrierName",
            is_shippo_account: "isShippoAccount",
            object_id: "objectId",
            object_owner: "objectOwner",
            service_levels: "serviceLevels",
            object_info: "objectInfo",
        });
    });
    CarrierAccountWithExtraInfo$.outboundSchema = z
        .object({
        accountId: z.string(),
        active: z.boolean().optional(),
        carrier: z.string(),
        parameters: z
            .union([
            fedexconnectexistingownaccountparameters_js_1.FedExConnectExistingOwnAccountParameters$.outboundSchema,
            upsconnectexistingownaccountparameters_js_1.UPSConnectExistingOwnAccountParameters$.outboundSchema,
            z.record(z.any()),
        ])
            .optional(),
        carrierName: z.any().optional(),
        isShippoAccount: z.boolean().optional(),
        metadata: z.string().optional(),
        objectId: z.string().optional(),
        objectOwner: z.string().optional(),
        serviceLevels: z.array(carrieraccountservicelevel_js_1.CarrierAccountServiceLevel$.outboundSchema).optional(),
        test: z.boolean().optional(),
        objectInfo: z.lazy(() => ObjectInfo$.outboundSchema).optional(),
    })
        .transform((v) => {
        return (0, primitives_js_1.remap)(v, {
            accountId: "account_id",
            carrierName: "carrier_name",
            isShippoAccount: "is_shippo_account",
            objectId: "object_id",
            objectOwner: "object_owner",
            serviceLevels: "service_levels",
            objectInfo: "object_info",
        });
    });
})(CarrierAccountWithExtraInfo$ || (exports.CarrierAccountWithExtraInfo$ = CarrierAccountWithExtraInfo$ = {}));
//# sourceMappingURL=carrieraccountwithextrainfo.js.map