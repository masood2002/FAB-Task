import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";
/**
 * Indicates the status of the Refund.
 */
export declare const RefundStatus: {
    readonly Queued: "QUEUED";
    readonly Pending: "PENDING";
    readonly Success: "SUCCESS";
    readonly Error: "ERROR";
};
/**
 * Indicates the status of the Refund.
 */
export type RefundStatus = ClosedEnum<typeof RefundStatus>;
export type Refund = {
    /**
     * Date and time of object creation.
     */
    objectCreated?: Date | undefined;
    /**
     * Unique identifier of the given object.
     */
    objectId?: string | undefined;
    /**
     * Username of the user who created the object.
     */
    objectOwner?: string | undefined;
    /**
     * Date and time of last object update.
     */
    objectUpdated?: Date | undefined;
    /**
     * Indicates the status of the Refund.
     */
    status?: RefundStatus | undefined;
    /**
     * Indicates whether the object has been created in test mode.
     */
    test?: boolean | undefined;
    /**
     * Object ID of the Transaction to be refunded.
     */
    transaction?: string | undefined;
};
/** @internal */
export declare namespace RefundStatus$ {
    const inboundSchema: z.ZodNativeEnum<typeof RefundStatus>;
    const outboundSchema: z.ZodNativeEnum<typeof RefundStatus>;
}
/** @internal */
export declare namespace Refund$ {
    const inboundSchema: z.ZodType<Refund, z.ZodTypeDef, unknown>;
    type Outbound = {
        object_created?: string | undefined;
        object_id?: string | undefined;
        object_owner?: string | undefined;
        object_updated?: string | undefined;
        status?: string | undefined;
        test?: boolean | undefined;
        transaction?: string | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Refund>;
}
//# sourceMappingURL=refund.d.ts.map