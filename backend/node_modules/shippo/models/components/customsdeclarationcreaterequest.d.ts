import { AddressImporter, AddressImporter$ } from "./addressimporter.js";
import { CustomsDeclarationB13AFilingOptionEnum } from "./customsdeclarationb13afilingoptionenum.js";
import { CustomsDeclarationContentsTypeEnum } from "./customsdeclarationcontentstypeenum.js";
import { CustomsDeclarationEelPfcEnum } from "./customsdeclarationeelpfcenum.js";
import { CustomsDeclarationIncotermEnum } from "./customsdeclarationincotermenum.js";
import { CustomsDeclarationNonDeliveryOptionEnum } from "./customsdeclarationnondeliveryoptionenum.js";
import { CustomsExporterIdentification, CustomsExporterIdentification$ } from "./customsexporteridentification.js";
import { CustomsItemCreateRequest, CustomsItemCreateRequest$ } from "./customsitemcreaterequest.js";
import * as z from "zod";
export type CustomsDeclarationCreateRequest = {
    /**
     * **required if eel_pfc is `AES_ITN`**<br>
     *
     * @remarks
     * AES / ITN reference of the shipment.
     */
    aesItn?: string | undefined;
    b13aFilingOption?: CustomsDeclarationB13AFilingOptionEnum | undefined;
    /**
     * **must be provided if and only if b13a_filing_option is provided**<br>
     *
     * @remarks
     * Represents:<br> the Proof of Report (POR) Number when b13a_filing_option is `FILED_ELECTRONICALLY`;<br>
     * the Summary ID Number when b13a_filing_option is `SUMMARY_REPORTING`;<br>
     * or the Exemption Number when b13a_filing_option is `NOT_REQUIRED`.
     */
    b13aNumber?: string | undefined;
    /**
     * Certificate reference of the shipment.
     */
    certificate?: string | undefined;
    /**
     * Expresses that the certify_signer has provided all information of this customs declaration truthfully.
     */
    certify: boolean;
    /**
     * Name of the person who created the customs declaration and is responsible for the validity of all
     *
     * @remarks
     * information provided.
     */
    certifySigner: string;
    commercialInvoice?: boolean | undefined;
    /**
     * **required if contents_type is `OTHER`**<br>
     *
     * @remarks
     * Explanation of the type of goods of the shipment.
     */
    contentsExplanation?: string | undefined;
    /**
     * Disclaimer for the shipment and customs information that have been provided.
     */
    disclaimer?: string | undefined;
    /**
     * Additional exporter identification that may be required to ship in certain countries
     */
    exporterIdentification?: CustomsExporterIdentification | undefined;
    /**
     * Exporter reference of an export shipment.
     */
    exporterReference?: string | undefined;
    /**
     * Importer reference of an import shipment.
     */
    importerReference?: string | undefined;
    /**
     * Indicates whether the shipment's destination VAT has been collected. May be required for some destinations.
     */
    isVatCollected?: boolean | undefined;
    /**
     * Invoice reference of the shipment.
     */
    invoice?: string | undefined;
    /**
     * License reference of the shipment.
     */
    license?: string | undefined;
    /**
     * A string of up to 100 characters that can be filled with any additional information you
     *
     * @remarks
     * want to attach to the object.
     */
    metadata?: string | undefined;
    /**
     * Additional notes to be included in the customs declaration.
     */
    notes?: string | undefined;
    /**
     * Object that represents the address of the importer
     */
    addressImporter?: AddressImporter | undefined;
    contentsType: CustomsDeclarationContentsTypeEnum;
    eelPfc?: CustomsDeclarationEelPfcEnum | undefined;
    incoterm?: CustomsDeclarationIncotermEnum | undefined;
    items: Array<CustomsItemCreateRequest>;
    nonDeliveryOption: CustomsDeclarationNonDeliveryOptionEnum;
    test?: boolean | undefined;
};
/** @internal */
export declare namespace CustomsDeclarationCreateRequest$ {
    const inboundSchema: z.ZodType<CustomsDeclarationCreateRequest, z.ZodTypeDef, unknown>;
    type Outbound = {
        aes_itn?: string | undefined;
        b13a_filing_option?: string | undefined;
        b13a_number?: string | undefined;
        certificate?: string | undefined;
        certify: boolean;
        certify_signer: string;
        commercial_invoice?: boolean | undefined;
        contents_explanation?: string | undefined;
        disclaimer?: string | undefined;
        exporter_identification?: CustomsExporterIdentification$.Outbound | undefined;
        exporter_reference?: string | undefined;
        importer_reference?: string | undefined;
        is_vat_collected?: boolean | undefined;
        invoice?: string | undefined;
        license?: string | undefined;
        metadata?: string | undefined;
        notes?: string | undefined;
        address_importer?: AddressImporter$.Outbound | undefined;
        contents_type: string;
        eel_pfc?: string | undefined;
        incoterm?: string | undefined;
        items: Array<CustomsItemCreateRequest$.Outbound>;
        non_delivery_option: string;
        test?: boolean | undefined;
    };
    const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CustomsDeclarationCreateRequest>;
}
//# sourceMappingURL=customsdeclarationcreaterequest.d.ts.map