"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Batches = void 0;
const hooks_js_1 = require("../hooks/hooks.js");
const config_js_1 = require("../lib/config.js");
const encodings_js_1 = require("../lib/encodings.js");
const http_js_1 = require("../lib/http.js");
const schemas$ = __importStar(require("../lib/schemas.js"));
const sdks_js_1 = require("../lib/sdks.js");
const components = __importStar(require("../models/components/index.js"));
const operations = __importStar(require("../models/operations/index.js"));
class Batches extends sdks_js_1.ClientSDK {
    constructor(options = {}) {
        const opt = options;
        let hooks;
        if (typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof hooks_js_1.SDKHooks) {
            hooks = opt.hooks;
        }
        else {
            hooks = new hooks_js_1.SDKHooks();
        }
        super({
            client: options.httpClient || new http_js_1.HTTPClient(),
            baseURL: (0, config_js_1.serverURLFromOptions)(options),
            hooks,
        });
        this.options$ = { ...options, hooks };
        void this.options$;
    }
    /**
     * Create a batch
     *
     * @remarks
     * Creates a new batch object for purchasing shipping labels for many shipments at once. Batches are created asynchronously. This means that the API response won't include your batch shipments yet. You need to retrieve the batch later to verify that all batch shipments are valid.
     */
    async create(request, options) {
        const input$ = request;
        const payload$ = schemas$.parse(input$, (value$) => components.BatchCreateRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = (0, encodings_js_1.encodeJSON)("body", payload$, { explode: true });
        const path$ = this.templateURLComponent("/batches")();
        const query$ = "";
        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
            "SHIPPO-API-VERSION": (0, encodings_js_1.encodeSimple)("SHIPPO-API-VERSION", this.options$.shippoApiVersion, { explode: false, charEncoding: "none" }),
        });
        let security$;
        if (typeof this.options$.apiKeyHeader === "function") {
            security$ = { apiKeyHeader: await this.options$.apiKeyHeader() };
        }
        else if (this.options$.apiKeyHeader) {
            security$ = { apiKeyHeader: this.options$.apiKeyHeader };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "CreateBatch",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyHeader,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, { context, errorCodes: ["400", "4XX", "5XX"] });
        const [result$] = await this.matcher()
            .json(201, components.Batch$)
            .fail([400, "4XX", "5XX"])
            .match(response);
        return result$;
    }
    /**
     * Retrieve a batch
     *
     * @remarks
     * Returns a batch using an object ID. <br> Batch shipments are displayed 100 at a time.  You can iterate
     * through each `page` using the `?page= query` parameter.  You can also filter based on batch shipment
     * status, for example, by passing a query param like `?object_results=creation_failed`. <br>
     * For more details on filtering results, see our guide on <a href="https://docs.goshippo.com/docs/api_concepts/filtering/" target="blank"> filtering</a>.
     */
    async get(batchId, options) {
        const input$ = {
            batchId: batchId,
        };
        const payload$ = schemas$.parse(input$, (value$) => operations.GetBatchRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            BatchId: (0, encodings_js_1.encodeSimple)("BatchId", payload$.BatchId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/batches/{BatchId}")(pathParams$);
        const query$ = "";
        const headers$ = new Headers({
            Accept: "application/json",
            "SHIPPO-API-VERSION": (0, encodings_js_1.encodeSimple)("SHIPPO-API-VERSION", this.options$.shippoApiVersion, { explode: false, charEncoding: "none" }),
        });
        let security$;
        if (typeof this.options$.apiKeyHeader === "function") {
            security$ = { apiKeyHeader: await this.options$.apiKeyHeader() };
        }
        else if (this.options$.apiKeyHeader) {
            security$ = { apiKeyHeader: this.options$.apiKeyHeader };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "GetBatch",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyHeader,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, { context, errorCodes: ["400", "4XX", "5XX"] });
        const [result$] = await this.matcher()
            .json(200, components.Batch$)
            .fail([400, "4XX", "5XX"])
            .match(response);
        return result$;
    }
    /**
     * Add shipments to a batch
     *
     * @remarks
     * Adds batch shipments to an existing batch.
     */
    async addShipments(batchId, requestBody, options) {
        const input$ = {
            batchId: batchId,
            requestBody: requestBody,
        };
        const payload$ = schemas$.parse(input$, (value$) => operations.AddShipmentsToBatchRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = (0, encodings_js_1.encodeJSON)("body", payload$.RequestBody, { explode: true });
        const pathParams$ = {
            BatchId: (0, encodings_js_1.encodeSimple)("BatchId", payload$.BatchId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/batches/{BatchId}/add_shipments")(pathParams$);
        const query$ = "";
        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
            "SHIPPO-API-VERSION": (0, encodings_js_1.encodeSimple)("SHIPPO-API-VERSION", this.options$.shippoApiVersion, { explode: false, charEncoding: "none" }),
        });
        let security$;
        if (typeof this.options$.apiKeyHeader === "function") {
            security$ = { apiKeyHeader: await this.options$.apiKeyHeader() };
        }
        else if (this.options$.apiKeyHeader) {
            security$ = { apiKeyHeader: this.options$.apiKeyHeader };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "AddShipmentsToBatch",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyHeader,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, { context, errorCodes: ["400", "4XX", "5XX"] });
        const [result$] = await this.matcher()
            .json(200, components.Batch$)
            .fail([400, "4XX", "5XX"])
            .match(response);
        return result$;
    }
    /**
     * Purchase a batch
     *
     * @remarks
     * Purchases an existing batch with a status of `VALID`.
     * Once you send a POST request to the purchase endpoint the batch status will change to `PURCHASING`.
     * When all the shipments are purchased, the status will change to `PURCHASED` and you will receive a
     * `batch_purchased` webhook indicating that the batch has been purchased
     */
    async purchase(batchId, options) {
        const input$ = {
            batchId: batchId,
        };
        const payload$ = schemas$.parse(input$, (value$) => operations.PurchaseBatchRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            BatchId: (0, encodings_js_1.encodeSimple)("BatchId", payload$.BatchId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/batches/{BatchId}/purchase")(pathParams$);
        const query$ = "";
        const headers$ = new Headers({
            Accept: "application/json",
            "SHIPPO-API-VERSION": (0, encodings_js_1.encodeSimple)("SHIPPO-API-VERSION", this.options$.shippoApiVersion, { explode: false, charEncoding: "none" }),
        });
        let security$;
        if (typeof this.options$.apiKeyHeader === "function") {
            security$ = { apiKeyHeader: await this.options$.apiKeyHeader() };
        }
        else if (this.options$.apiKeyHeader) {
            security$ = { apiKeyHeader: this.options$.apiKeyHeader };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "PurchaseBatch",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyHeader,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, { context, errorCodes: ["400", "4XX", "5XX"] });
        const [result$] = await this.matcher()
            .json(202, components.Batch$)
            .fail([400, "4XX", "5XX"])
            .match(response);
        return result$;
    }
    /**
     * Remove shipments from a batch
     *
     * @remarks
     * Removes shipments from an existing batch shipment.
     */
    async removeShipments(batchId, requestBody, options) {
        const input$ = {
            batchId: batchId,
            requestBody: requestBody,
        };
        const payload$ = schemas$.parse(input$, (value$) => operations.RemoveShipmentsFromBatchRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = (0, encodings_js_1.encodeJSON)("body", payload$.RequestBody, { explode: true });
        const pathParams$ = {
            BatchId: (0, encodings_js_1.encodeSimple)("BatchId", payload$.BatchId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/batches/{BatchId}/remove_shipments")(pathParams$);
        const query$ = "";
        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
            "SHIPPO-API-VERSION": (0, encodings_js_1.encodeSimple)("SHIPPO-API-VERSION", this.options$.shippoApiVersion, { explode: false, charEncoding: "none" }),
        });
        let security$;
        if (typeof this.options$.apiKeyHeader === "function") {
            security$ = { apiKeyHeader: await this.options$.apiKeyHeader() };
        }
        else if (this.options$.apiKeyHeader) {
            security$ = { apiKeyHeader: this.options$.apiKeyHeader };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "RemoveShipmentsFromBatch",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyHeader,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, { context, errorCodes: ["400", "4XX", "5XX"] });
        const [result$] = await this.matcher()
            .json(200, components.Batch$)
            .fail([400, "4XX", "5XX"])
            .match(response);
        return result$;
    }
}
exports.Batches = Batches;
//# sourceMappingURL=batches.js.map