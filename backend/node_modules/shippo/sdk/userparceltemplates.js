"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserParcelTemplates = void 0;
const hooks_js_1 = require("../hooks/hooks.js");
const config_js_1 = require("../lib/config.js");
const encodings_js_1 = require("../lib/encodings.js");
const http_js_1 = require("../lib/http.js");
const schemas$ = __importStar(require("../lib/schemas.js"));
const sdks_js_1 = require("../lib/sdks.js");
const components = __importStar(require("../models/components/index.js"));
const operations = __importStar(require("../models/operations/index.js"));
const z = __importStar(require("zod"));
class UserParcelTemplates extends sdks_js_1.ClientSDK {
    constructor(options = {}) {
        const opt = options;
        let hooks;
        if (typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof hooks_js_1.SDKHooks) {
            hooks = opt.hooks;
        }
        else {
            hooks = new hooks_js_1.SDKHooks();
        }
        super({
            client: options.httpClient || new http_js_1.HTTPClient(),
            baseURL: (0, config_js_1.serverURLFromOptions)(options),
            hooks,
        });
        this.options$ = { ...options, hooks };
        void this.options$;
    }
    /**
     * List all user parcel templates
     *
     * @remarks
     * Returns a list all of all user parcel template objects.
     */
    async list(options) {
        const input$ = {};
        void input$; // request input is unused
        const path$ = this.templateURLComponent("/user-parcel-templates")();
        const query$ = "";
        const headers$ = new Headers({
            Accept: "application/json",
            "SHIPPO-API-VERSION": (0, encodings_js_1.encodeSimple)("SHIPPO-API-VERSION", this.options$.shippoApiVersion, { explode: false, charEncoding: "none" }),
        });
        let security$;
        if (typeof this.options$.apiKeyHeader === "function") {
            security$ = { apiKeyHeader: await this.options$.apiKeyHeader() };
        }
        else if (this.options$.apiKeyHeader) {
            security$ = { apiKeyHeader: this.options$.apiKeyHeader };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "ListUserParcelTemplates",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyHeader,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
        }, options);
        const response = await this.do$(request$, { context, errorCodes: ["400", "4XX", "5XX"] });
        const [result$] = await this.matcher()
            .json(200, components.UserParcelTemplateList$)
            .fail([400, "4XX", "5XX"])
            .match(response);
        return result$;
    }
    /**
     * Create a new user parcel template
     *
     * @remarks
     * Creates a new user parcel template. <br>You can choose to create a
     * parcel template using a preset carrier template as a starting point, or
     * you can create an entirely custom one. To use a preset carrier template,
     * pass in a unique template token from <a href="#tag/Parcel-Templates">this list</a>
     * plus the weight fields (**weight** and **weight_unit**). Otherwise, omit
     * the template field and pass the other fields, for the weight, length, height,
     * and depth, as well as their units."
     */
    async create(request, options) {
        const input$ = request;
        const payload$ = schemas$.parse(input$, (value$) => components.UserParcelTemplateCreateRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = (0, encodings_js_1.encodeJSON)("body", payload$, { explode: true });
        const path$ = this.templateURLComponent("/user-parcel-templates")();
        const query$ = "";
        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
            "SHIPPO-API-VERSION": (0, encodings_js_1.encodeSimple)("SHIPPO-API-VERSION", this.options$.shippoApiVersion, { explode: false, charEncoding: "none" }),
        });
        let security$;
        if (typeof this.options$.apiKeyHeader === "function") {
            security$ = { apiKeyHeader: await this.options$.apiKeyHeader() };
        }
        else if (this.options$.apiKeyHeader) {
            security$ = { apiKeyHeader: this.options$.apiKeyHeader };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "CreateUserParcelTemplate",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyHeader,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "POST",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, { context, errorCodes: ["400", "4XX", "5XX"] });
        const [result$] = await this.matcher()
            .json(200, components.UserParcelTemplate$)
            .fail([400, "4XX", "5XX"])
            .match(response);
        return result$;
    }
    /**
     * Delete a user parcel template
     *
     * @remarks
     * Deletes a user parcel template using an object ID.
     */
    async delete(userParcelTemplateObjectId, options) {
        const input$ = {
            userParcelTemplateObjectId: userParcelTemplateObjectId,
        };
        const payload$ = schemas$.parse(input$, (value$) => operations.DeleteUserParcelTemplateRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            UserParcelTemplateObjectId: (0, encodings_js_1.encodeSimple)("UserParcelTemplateObjectId", payload$.UserParcelTemplateObjectId, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/user-parcel-templates/{UserParcelTemplateObjectId}")(pathParams$);
        const query$ = "";
        const headers$ = new Headers({
            Accept: "*/*",
            "SHIPPO-API-VERSION": (0, encodings_js_1.encodeSimple)("SHIPPO-API-VERSION", this.options$.shippoApiVersion, { explode: false, charEncoding: "none" }),
        });
        let security$;
        if (typeof this.options$.apiKeyHeader === "function") {
            security$ = { apiKeyHeader: await this.options$.apiKeyHeader() };
        }
        else if (this.options$.apiKeyHeader) {
            security$ = { apiKeyHeader: this.options$.apiKeyHeader };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "DeleteUserParcelTemplate",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyHeader,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "DELETE",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, { context, errorCodes: ["400", "4XX", "5XX"] });
        const [result$] = await this.matcher()
            .void(204, z.void())
            .fail([400, "4XX", "5XX"])
            .match(response);
        return result$;
    }
    /**
     * Retrieves a user parcel template
     *
     * @remarks
     * Returns the parcel template information for a specific user parcel
     * template, identified by the object ID.
     */
    async get(userParcelTemplateObjectId, options) {
        const input$ = {
            userParcelTemplateObjectId: userParcelTemplateObjectId,
        };
        const payload$ = schemas$.parse(input$, (value$) => operations.GetUserParcelTemplateRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            UserParcelTemplateObjectId: (0, encodings_js_1.encodeSimple)("UserParcelTemplateObjectId", payload$.UserParcelTemplateObjectId, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/user-parcel-templates/{UserParcelTemplateObjectId}")(pathParams$);
        const query$ = "";
        const headers$ = new Headers({
            Accept: "application/json",
            "SHIPPO-API-VERSION": (0, encodings_js_1.encodeSimple)("SHIPPO-API-VERSION", this.options$.shippoApiVersion, { explode: false, charEncoding: "none" }),
        });
        let security$;
        if (typeof this.options$.apiKeyHeader === "function") {
            security$ = { apiKeyHeader: await this.options$.apiKeyHeader() };
        }
        else if (this.options$.apiKeyHeader) {
            security$ = { apiKeyHeader: this.options$.apiKeyHeader };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "GetUserParcelTemplate",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyHeader,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, { context, errorCodes: ["400", "4XX", "5XX"] });
        const [result$] = await this.matcher()
            .json(200, components.UserParcelTemplate$)
            .fail([400, "4XX", "5XX"])
            .match(response);
        return result$;
    }
    /**
     * Update an existing user parcel template
     *
     * @remarks
     * Updates an existing user parcel template.
     */
    async update(userParcelTemplateObjectId, userParcelTemplateUpdateRequest, options) {
        const input$ = {
            userParcelTemplateObjectId: userParcelTemplateObjectId,
            userParcelTemplateUpdateRequest: userParcelTemplateUpdateRequest,
        };
        const payload$ = schemas$.parse(input$, (value$) => operations.UpdateUserParcelTemplateRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = (0, encodings_js_1.encodeJSON)("body", payload$.UserParcelTemplateUpdateRequest, {
            explode: true,
        });
        const pathParams$ = {
            UserParcelTemplateObjectId: (0, encodings_js_1.encodeSimple)("UserParcelTemplateObjectId", payload$.UserParcelTemplateObjectId, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/user-parcel-templates/{UserParcelTemplateObjectId}")(pathParams$);
        const query$ = "";
        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
            "SHIPPO-API-VERSION": (0, encodings_js_1.encodeSimple)("SHIPPO-API-VERSION", this.options$.shippoApiVersion, { explode: false, charEncoding: "none" }),
        });
        let security$;
        if (typeof this.options$.apiKeyHeader === "function") {
            security$ = { apiKeyHeader: await this.options$.apiKeyHeader() };
        }
        else if (this.options$.apiKeyHeader) {
            security$ = { apiKeyHeader: this.options$.apiKeyHeader };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "UpdateUserParcelTemplate",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyHeader,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "PUT",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, { context, errorCodes: ["400", "4XX", "5XX"] });
        const [result$] = await this.matcher()
            .json(200, components.UserParcelTemplate$)
            .fail([400, "4XX", "5XX"])
            .match(response);
        return result$;
    }
}
exports.UserParcelTemplates = UserParcelTemplates;
//# sourceMappingURL=userparceltemplates.js.map