"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CarrierParcelTemplates = void 0;
const hooks_js_1 = require("../hooks/hooks.js");
const config_js_1 = require("../lib/config.js");
const encodings_js_1 = require("../lib/encodings.js");
const http_js_1 = require("../lib/http.js");
const schemas$ = __importStar(require("../lib/schemas.js"));
const sdks_js_1 = require("../lib/sdks.js");
const components = __importStar(require("../models/components/index.js"));
const operations = __importStar(require("../models/operations/index.js"));
class CarrierParcelTemplates extends sdks_js_1.ClientSDK {
    constructor(options = {}) {
        const opt = options;
        let hooks;
        if (typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof hooks_js_1.SDKHooks) {
            hooks = opt.hooks;
        }
        else {
            hooks = new hooks_js_1.SDKHooks();
        }
        super({
            client: options.httpClient || new http_js_1.HTTPClient(),
            baseURL: (0, config_js_1.serverURLFromOptions)(options),
            hooks,
        });
        this.options$ = { ...options, hooks };
        void this.options$;
    }
    /**
     * List all carrier parcel templates
     *
     * @remarks
     * List all carrier parcel template objects. <br> Use the following query string params to filter the results as needed. <br>
     * <ul>
     * <li>`include=all` (the default). Includes templates from all carriers </li>
     * <li>`include=user`. Includes templates only from carriers which the user has added (whether or not they're currently enabled) </li>
     * <li>`include=enabled`. includes templates only for carriers which the user has added and enabled </li>
     * <li>`carrier=*token*`. filter by specific carrier, e.g. fedex, usps </li>
     * </ul>
     */
    async list(include, carrier, options) {
        const input$ = {
            include: include,
            carrier: carrier,
        };
        const payload$ = schemas$.parse(input$, (value$) => operations.ListCarrierParcelTemplatesRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const path$ = this.templateURLComponent("/parcel-templates")();
        const query$ = (0, encodings_js_1.encodeFormQuery)({
            carrier: payload$.carrier,
            include: payload$.include,
        });
        const headers$ = new Headers({
            Accept: "application/json",
            "SHIPPO-API-VERSION": (0, encodings_js_1.encodeSimple)("SHIPPO-API-VERSION", this.options$.shippoApiVersion, { explode: false, charEncoding: "none" }),
        });
        let security$;
        if (typeof this.options$.apiKeyHeader === "function") {
            security$ = { apiKeyHeader: await this.options$.apiKeyHeader() };
        }
        else if (this.options$.apiKeyHeader) {
            security$ = { apiKeyHeader: this.options$.apiKeyHeader };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "ListCarrierParcelTemplates",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyHeader,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, { context, errorCodes: ["400", "4XX", "5XX"] });
        const [result$] = await this.matcher()
            .json(200, components.CarrierParcelTemplateList$)
            .fail([400, "4XX", "5XX"])
            .match(response);
        return result$;
    }
    /**
     * Retrieve a carrier parcel templates
     *
     * @remarks
     * Fetches the parcel template information for a specific carrier parcel template, identified by the token.
     */
    async get(carrierParcelTemplateToken, options) {
        const input$ = {
            carrierParcelTemplateToken: carrierParcelTemplateToken,
        };
        const payload$ = schemas$.parse(input$, (value$) => operations.GetCarrierParcelTemplateRequest$.outboundSchema.parse(value$), "Input validation failed");
        const body$ = null;
        const pathParams$ = {
            CarrierParcelTemplateToken: (0, encodings_js_1.encodeSimple)("CarrierParcelTemplateToken", payload$.CarrierParcelTemplateToken, { explode: false, charEncoding: "percent" }),
        };
        const path$ = this.templateURLComponent("/parcel-templates/{CarrierParcelTemplateToken}")(pathParams$);
        const query$ = "";
        const headers$ = new Headers({
            Accept: "application/json",
            "SHIPPO-API-VERSION": (0, encodings_js_1.encodeSimple)("SHIPPO-API-VERSION", this.options$.shippoApiVersion, { explode: false, charEncoding: "none" }),
        });
        let security$;
        if (typeof this.options$.apiKeyHeader === "function") {
            security$ = { apiKeyHeader: await this.options$.apiKeyHeader() };
        }
        else if (this.options$.apiKeyHeader) {
            security$ = { apiKeyHeader: this.options$.apiKeyHeader };
        }
        else {
            security$ = {};
        }
        const context = {
            operationID: "GetCarrierParcelTemplate",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyHeader,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);
        const request$ = this.createRequest$(context, {
            security: securitySettings$,
            method: "GET",
            path: path$,
            headers: headers$,
            query: query$,
            body: body$,
        }, options);
        const response = await this.do$(request$, { context, errorCodes: ["400", "4XX", "5XX"] });
        const [result$] = await this.matcher()
            .json(200, components.CarrierParcelTemplate$)
            .fail([400, "4XX", "5XX"])
            .match(response);
        return result$;
    }
}
exports.CarrierParcelTemplates = CarrierParcelTemplates;
//# sourceMappingURL=carrierparceltemplates.js.map